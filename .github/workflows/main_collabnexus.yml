# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions
name: Build and deploy Node.js app to Azure Web App - CollabNexus

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest  # Changed from windows-latest to fix "Filename too long" errors
    permissions:
      contents: read # This is required for actions/checkout
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js version
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'

      - name: npm install and build
        run: |
          npm install
          npm run build --if-present

      - name: Run tests with coverage
        run: |
          npm test -- --coverage --coverageReporters=text --coverageReporters=text-summary --coverageReporters=json-summary

      - name: Display coverage summary
        run: |
          echo "========= TEST COVERAGE SUMMARY ========="
          if [ -f "./coverage/coverage-summary.json" ]; then
            summary=$(cat ./coverage/coverage-summary.json)
            statements=$(echo "$summary" | jq '.total.statements.pct')
            branches=$(echo "$summary" | jq '.total.branches.pct')
            functions=$(echo "$summary" | jq '.total.functions.pct')
            lines=$(echo "$summary" | jq '.total.lines.pct')
            echo "Statements: $statements%"
            echo "Branches: $branches%"
            echo "Functions: $functions%"
            echo "Lines: $lines%"
          else
            echo "Coverage summary not found. Check test output above for coverage information."
            echo "See the coverage directory artifact for more details."
          fi
          echo "========================================"

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/

      - name: Get package version
        id: package_version
        run: |
          echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
          echo "timestamp=$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT

      - name: Create web.config
        run: |
          echo '<?xml version="1.0" encoding="utf-8"?>' > web.config
          echo '<configuration>' >> web.config
          echo '  <system.webServer>' >> web.config
          echo '    <handlers>' >> web.config
          echo '      <add name="iisnode" path="src/server.js" verb="*" modules="iisnode" />' >> web.config
          echo '    </handlers>' >> web.config
          echo '    <rewrite>' >> web.config
          echo '      <rules>' >> web.config
          echo '        <rule name="nodejs">' >> web.config
          echo '          <match url="/*" />' >> web.config
          echo '          <action type="Rewrite" url="src/server.js" />' >> web.config
          echo '        </rule>' >> web.config
          echo '      </rules>' >> web.config
          echo '    </rewrite>' >> web.config
          echo '    <iisnode watchedFiles="*.js;node_modules\*;routes\*.js;views\*.js" />' >> web.config
          echo '  </system.webServer>' >> web.config
          echo '</configuration>' >> web.config

      - name: Create .env file
        run: |
          echo "SUPABASE_URL=${{ secrets.SUPABASE_URL }}" > .env
          echo "SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}" >> .env
          echo "SUPABASE_SERVICE_KEY=${{ secrets.SUPABASE_SERVICE_KEY }}" >> .env
          echo "SESSION_SECRET=${{ secrets.SESSION_SECRET }}" >> .env
          echo "PORT=8080" >> .env
          echo "NODE_ENV=production" >> .env

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: node-app
          path: .

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: node-app

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_92C40EADF2D347508B6F2294C072867C }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_415BF3DAEC4D4B579E36C58C1CE9703D }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_EA42EEAE86F845D7AAF61F6744B98049 }}

      - name: Configure App Settings
        uses: azure/appservice-settings@v1
        with:
          app-name: 'CollabNexus'
          slot-name: 'Production'
          app-settings-json: |
            [
              { "name": "SUPABASE_URL", "value": "${{ secrets.SUPABASE_URL }}", "slotSetting": false },
              { "name": "SUPABASE_ANON_KEY", "value": "${{ secrets.SUPABASE_ANON_KEY }}", "slotSetting": false },
              { "name": "SUPABASE_SERVICE_KEY", "value": "${{ secrets.SUPABASE_SERVICE_KEY }}", "slotSetting": false },
              { "name": "SESSION_SECRET", "value": "${{ secrets.SESSION_SECRET }}", "slotSetting": false },
              { "name": "GOOGLE_CLIENT_ID", "value": "${{ secrets.GOOGLE_CLIENT_ID }}", "slotSetting": false },
              { "name": "GOOGLE_CLIENT_SECRET", "value": "${{ secrets.GOOGLE_CLIENT_SECRET }}", "slotSetting": false },
              { "name": "PRODUCTION_REDIRECT_URL", "value": "${{ secrets.PRODUCTION_REDIRECT_URL }}", "slotSetting": false },
              { "name": "NODE_ENV", "value": "production", "slotSetting": false },
              { "name": "WEBSITE_NODE_DEFAULT_VERSION", "value": "~20", "slotSetting": false }
            ]

      - name: 'Deploy to Azure Web App'
        uses: azure/webapps-deploy@v3
        id: deploy-to-webapp
        with:
          app-name: 'CollabNexus'
          slot-name: 'Production'
          package: .

  create-release:
    runs-on: ubuntu-latest
    needs: deploy
    permissions:
      contents: write # Required for creating releases
    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: node-app

      - name: Get version from package.json
        id: package_version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          TIMESTAMP=$(date +'%Y%m%d-%H%M%S')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "timestamp=$TIMESTAMP" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.package_version.outputs.version }}-${{ steps.package_version.outputs.timestamp }}
          release_name: Release v${{ steps.package_version.outputs.version }} (${{ steps.package_version.outputs.timestamp }})
          body: |
            # CollabNexus Release v${{ steps.package_version.outputs.version }}
            
            Deployment timestamp: ${{ steps.package_version.outputs.timestamp }}
            
            ## What's Changed
            * Automated release from CI/CD pipeline
            * Deployed to Azure Web App - CollabNexus
          draft: false
          prerelease: false
